#!/bin/bash

# Setup script for remote PostgreSQL connection with MCP Agent
set -e

echo "üåê Setting up MCP PostgreSQL Pro for Remote Connection"
echo "=" * 60

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to prompt for input with default value
prompt_with_default() {
    local prompt="$1"
    local default="$2"
    local result
    
    read -p "$prompt [$default]: " result
    echo "${result:-$default}"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

echo -e "${BLUE}üîç Checking prerequisites...${NC}"

# Check Docker
if ! command_exists docker; then
    echo -e "${RED}‚ùå Docker is not installed. Please install Docker first.${NC}"
    exit 1
fi

# Check Docker Compose
if ! command_exists docker-compose && ! docker compose version >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker Compose is not installed. Please install Docker Compose first.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Prerequisites check passed${NC}"

# Get remote PostgreSQL details
echo -e "\n${BLUE}üìã Remote PostgreSQL Configuration${NC}"
echo "Please provide the details for your remote PostgreSQL instance:"

# Get remote WSL IP
echo -e "\n${YELLOW}üí° To find your remote WSL IP, run this on the remote instance:${NC}"
echo "ip addr show eth0 | grep 'inet ' | awk '{print \$2}' | cut -d/ -f1"

DB_HOST=$(prompt_with_default "Remote PostgreSQL Host (IP address)" "172.30.196.100")
DB_USER=$(prompt_with_default "PostgreSQL Username" "postgres")
DB_NAME=$(prompt_with_default "Database Name" "testdb")
DB_PORT=$(prompt_with_default "PostgreSQL Port" "5432")

# Get password securely
echo -n "PostgreSQL Password: "
read -s DB_PASSWORD
echo

# Get AI model configuration
echo -e "\n${BLUE}ü§ñ AI Model Configuration${NC}"
echo "Choose your AI model provider:"
echo "1. Google Gemini (recommended)"
echo "2. OpenAI GPT"
echo "3. Groq (free)"

model_choice=$(prompt_with_default "Enter choice (1-3)" "1")

case $model_choice in
    1)
        MODEL_ID="gemini-2.0-flash-exp"
        echo -e "${YELLOW}üí° Get your Gemini API key from: https://aistudio.google.com/${NC}"
        ;;
    2)
        MODEL_ID="gpt-4o"
        echo -e "${YELLOW}üí° Get your OpenAI API key from: https://platform.openai.com/${NC}"
        ;;
    3)
        MODEL_ID="llama-3.3-70b-versatile"
        echo -e "${YELLOW}üí° Get your Groq API key from: https://console.groq.com/${NC}"
        ;;
    *)
        MODEL_ID="gemini-2.0-flash-exp"
        ;;
esac

echo -n "API Key: "
read -s MODEL_API_KEY
echo

# Create .env file
echo -e "\n${BLUE}üìù Creating .env file...${NC}"

cat > .env << EOF
# Remote PostgreSQL Configuration
# Generated by setup_remote_env.sh on $(date)

# ===== REMOTE POSTGRESQL CONNECTION =====
DB_HOST=$DB_HOST
DB_USER=$DB_USER
DB_PASSWORD=$DB_PASSWORD
DB_NAME=$DB_NAME
DB_PORT=$DB_PORT

# ===== AI MODEL CONFIGURATION =====
MODEL_API_KEY=$MODEL_API_KEY
MODEL_ID=$MODEL_ID

# ===== DOCKER CONFIGURATION =====
NETWORK_MODE=host                   # Better for remote connections

# ===== OPTIONAL CONFIGURATIONS =====
# Uncomment and modify as needed

# pgAdmin configuration
#PGADMIN_EMAIL=admin@example.com
#PGADMIN_PASSWORD=admin
#PGADMIN_PORT=8080

# Local PostgreSQL (for development)
#POSTGRES_DB=testdb
#POSTGRES_USER=postgres
#POSTGRES_PASSWORD=dev
#POSTGRES_PORT=5433
EOF

echo -e "${GREEN}‚úÖ .env file created successfully${NC}"

# Test connection
echo -e "\n${BLUE}üß™ Testing remote PostgreSQL connection...${NC}"

if command_exists python3; then
    if python3 test_remote_connection.py; then
        echo -e "${GREEN}‚úÖ Connection test passed!${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Connection test failed. Please check your configuration.${NC}"
        echo -e "${YELLOW}üí° Make sure PostgreSQL on remote instance is configured to accept remote connections.${NC}"
        echo -e "${YELLOW}üìñ See REMOTE_CONNECTION_GUIDE.md for detailed setup instructions.${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Python3 not found. Skipping connection test.${NC}"
fi

# Start Docker services
echo -e "\n${BLUE}üê≥ Starting Docker services...${NC}"

if docker-compose up -d postgres-mcp; then
    echo -e "${GREEN}‚úÖ MCP server started successfully${NC}"
    
    # Wait a moment for startup
    sleep 5
    
    # Check health
    if curl -s http://localhost:8000/health > /dev/null; then
        echo -e "${GREEN}‚úÖ MCP server health check passed${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  MCP server health check failed. Check logs: docker-compose logs postgres-mcp${NC}"
    fi
else
    echo -e "${RED}‚ùå Failed to start MCP server${NC}"
    exit 1
fi

# Final instructions
echo -e "\n${GREEN}üéâ Setup completed successfully!${NC}"
echo -e "\n${BLUE}üöÄ Next steps:${NC}"
echo "1. Run your application:"
echo "   streamlit run app_postgres_pro.py"
echo ""
echo "2. Access services:"
echo "   ‚Ä¢ MCP Server: http://localhost:8000"
echo "   ‚Ä¢ Health Check: curl http://localhost:8000/health"
echo ""
echo "3. Optional - Start pgAdmin:"
echo "   docker-compose --profile remote up -d pgadmin"
echo "   Access at: http://localhost:8080"
echo ""
echo -e "${BLUE}üìö Documentation:${NC}"
echo "‚Ä¢ Remote connection guide: REMOTE_CONNECTION_GUIDE.md"
echo "‚Ä¢ Docker setup guide: DOCKER_REMOTE_SETUP.md"
echo ""
echo -e "${BLUE}üîß Troubleshooting:${NC}"
echo "‚Ä¢ Check logs: docker-compose logs postgres-mcp"
echo "‚Ä¢ Test connection: python3 test_remote_connection.py"
echo "‚Ä¢ View running services: docker-compose ps"
echo ""
echo -e "${GREEN}Happy coding! üöÄ${NC}" 